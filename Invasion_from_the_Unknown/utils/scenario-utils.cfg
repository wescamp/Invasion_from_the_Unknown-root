#textdomain wesnoth-Invasion_from_the_Unknown

#define SCENARIO_STUB
#enddef

#define MAP NAME
	map_data="{@campaigns/Invasion_from_the_Unknown/maps/{NAME}}"
	{SCENARIO_STUB}
#enddef

#define MASK NAME
	mask="{@campaigns/Invasion_from_the_Unknown/masks/{NAME}}"
#enddef

#define NO_RECALLS
	disallow_recall=yes
#enddef

#define NO_MAP
	map_data="1 _off^_usr"
#enddef

#define BOSS_SCENARIO EPISODE LEVELNUM TITLE
	id={LEVELNUM}_E{EPISODE}_Boss
	name={TITLE}
	{MAP {LEVELNUM}_E{EPISODE}_Boss.map}
	turns=-1
	victory_when_enemies_defeated=no
	# FIXME: Need a more thrilling background music
	{SCENARIO_MUSIC "breaking_the_chains.ogg"}
#enddef

# The pop-up message that appears when the players encounters
# an episode boss in the RPG scenarios. Made it a macro to keep it easier
# to modify across the entire campaign.
#define BOSS_POPUP
	[print]
		text= _ "Enemy boss sighted!"
		red,green,blue=255,127,0
		size=32
	[/print]
#enddef

#define BOSS_AMBIENTANCE
	[music]
		name=vengeful.ogg
		immediate=yes
	[/music]

	{BOSS_POPUP}
#enddef

#define __ENDLEVEL_SHARED
	# Redraw display area
	{REDRAW}
	# Store hero's side colour, TC map and standing frame file path
	# Used in IftU's StoryWML
	[if]
		[have_unit]
			description=Galas
		[/have_unit]
		[then]
			{CLEAR_VARIABLE storymap_heroicon}
			[store_unit]
				[filter]
					description=Galas
				[/filter]
				variable=__heroprobe
				kill=no
			[/store_unit]
			[store_side]
				side=$__heroprobe.side
				variable=__herosideprobe
			[/store_side]
			{VARIABLE storymap_heroicon ("$__heroprobe.image|~RC($__heroprobe.flag_rgb|>$__herosideprobe.colour|)")}
			{CLEAR_VARIABLE __heroprobe}
			{CLEAR_VARIABLE __herosideprobe}
		[/then]
	[/if]
#enddef

#define ENDLEVEL_VICTORY BONUS
	{__ENDLEVEL_SHARED}
	{VICTORY_MUSIC}
	[endlevel]
		result=victory
		bonus={BONUS}
	[/endlevel]
#enddef

#define ENDLEVEL_CONTINUE
	{__ENDLEVEL_SHARED}
	[music]
		name=silence.ogg
		immediate=yes
		play_once=yes
	[/music]
	[endlevel]
		result=continue
		bonus=no
	[/endlevel]
#enddef

#define ENDLEVEL_QUIET
	{__ENDLEVEL_SHARED}
	[endlevel]
		result=continue_no_save
		bonus=no
	[/endlevel]
#enddef

#define ENDLEVEL_DEFEAT
	{__ENDLEVEL_SHARED}
	{DEFEAT_MUSIC}
	[endlevel]
		result=defeat
	[/endlevel]
#enddef

#define SET_RECRUIT_LIST SIDE LIST
	[modify_side]
		side={SIDE}
		recruit={LIST}
	[/modify_side]
#enddef

#define ALLOW_RECRUIT SIDE LIST
	[allow_recruit]
		side={SIDE}
		type={LIST}
	[/allow_recruit]
#enddef

#define DISALLOW_RECRUIT SIDE LIST
	[disallow_recruit]
		side={SIDE}
		type={LIST}
	[/disallow_recruit]
#enddef

#define OBJECTIVE_TO_WIN DESCRIPTION
	[objective]
		description={DESCRIPTION}
		condition=win
	[/objective]
#enddef

#define OBJECTIVE_TO_LOSE DESCRIPTION
	[objective]
		description={DESCRIPTION}
		condition=lose
	[/objective]
#enddef

#define SET_OBJECTIVES SIDE CONTENTS
	[objectives]
		side={SIDE}
		{CONTENTS}
	[/objectives]
#enddef

#define UNDER_CONSTRUCTION
	[event]
		name=start
		[message]
			speaker=narrator
			caption= _ "Hard Hat Area"
			message= _ "*Shadow Master (author):
This scenario is under construction, so you should not play it unless you really want to see a glimpse of what is coming next release, because savefiles of it might not be compatible with the finished scenario. Updates in the 1.3.x campaign server or in the www.wesnoth.org forum thread 'Invasion from the Unknown' (Scenario and Campaign dev. forum)

You will be redirected to the Credits screen after the first turn.

-- The author"
		[/message]
	[/event]

	[event]
		name=turn 2
		[endlevel]
			result=continue_no_save
			next_scenario=null
		[/endlevel]
	[/event]
#enddef

#define SIGHTED_SUF_BY_PLAYER SPOTTED_UNIT_SUF
	name=sighted
	[filter]
		{SPOTTED_UNIT_SUF}
	[/filter]
	[filter_second]
		side=1
	[/filter_second]
#enddef

#define SIGHTED_SUF_BY_SIDE SPOTTED_UNIT_SUF SPOTTER_SIDE_NUM
	name=sighted
	[filter]
		{SPOTTED_UNIT_SUF}
	[/filter]
	[filter_second]
		side={SPOTTER_SIDE_NUM}
	[/filter_second]
#enddef

#define AI_TARGET SUF VALUE
	[target]
		{SUF}
		value={VALUE}
	[/target]
#enddef

# The following macro is used in gauntlet scenarios to store a list of units
# that are to be recalled (recall "meta list") in the following scenario, thus eliminating
# the need of role-conditionals and such in prestart events
# This macro is intended to be used in victory events
#define GAUNTLET_SAVE_RECALL_METALIST
	[store_unit]
		variable=metalist_piggy
		kill=no
		# Store non-heroes that have valid locations (i.e. not in recall list atm, but
		# rather in the actual map)
		[filter]
			x=1-1000
			y=1-1000
			side=1
			[not]
				description=Galas
			[/not]
			[not]
				description=Mal Keshar
			[/not]
			[not]
				description=Elynia
			[/not]
			[not]
				description=Erathan
			[/not]
			[not]
				description=Igor
			[/not]
		[/filter]
	[/store_unit]
	# metalist_piggy may use a lot of memory/disk space that would be wasted, as all we
	# need to recall an unit is its description, no images, attack code, etc.
	# So to save space in the savefile and memory buffers related to it, we copy each
	# metalist_piggy's unit entry's description onto recall_metalist, the light-weight
	# final metalist storage space.
	[if]
		{VARIABLE_NUM_GREATER_THAN metalist_piggy.length 0}
		[then]
			{VARIABLE recall_metalist_enabled "yes"}
			{FOREACH metalist_piggy j}
				{VARIABLE recall_metalist[$j] ($metalist_piggy[$j].description)}
			{NEXT j}
		[/then]
	[/if]
	{CLEAR_VARIABLE metalist_piggy}
#enddef

# Recalls unit from the recall-"metalist", by iterating over it and doing
# recall for each inner item. This metalist is nothing else than an array of
# $unit.description fields
# This macro is intended to be used after recalling all heroes in a prestart event
#define GAUNTLET_RECALL_METALIST
	[if]
		{VARIABLE_LEXICAL_EQUALS recall_metalist_enabled "yes"}
		[then]
			{FOREACH recall_metalist k}
				[recall]
					description=$recall_metalist[$k]
				[/recall]
			{NEXT k}
		[/then]
	[/if]
	# Clean up
	{CLEAR_VARIABLE recall_metalist}
	{CLEAR_VARIABLE recall_metalist_enabled}
#enddef
